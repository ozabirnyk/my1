# This is my first artificial neural network (ANN).

# Over 20 years my dream was to make a program that can distinguish between cats and dogs.
# I shall use external functions only to upload pictures of cats and dogs. I'll code main math by myself.

import os
import time
import random
from PIL import Image
import numpy as np

my_input_image_size = (100, 100)
my_receptors = my_input_image_size[0] * my_input_image_size[1] * 3
testset = 20%


def load_dataset(folder_name):
    filelist = os.listdir(folder_name)
    dataset = np.empty((len(filelist), my_receptors), dtype=int)
    for i in range(len(filelist)):
        pic = Image.open(os.path.join(folder_name, filelist[i]))
        pic = pic.resize(my_input_image_size)
        dataset[i, :] = np.array(np.array(pic.getdata(), dtype=int).reshape(my_receptors))
    return dataset


def index_reshape(start, index, size):
    index1d = start
    multiplier1d = 1
    for i in range(len(size) - 1, -1, -1):
        index1d += index[i] * multiplier1d
        multiplier1d *= size[i]
    return index1d


def run_tests():
    flag_ok = True
    print('Running tests...')

    error_message = 'index_reshape test failed'
    n = (10, 10, 3)
    a = np.arange(300)
    b = a.reshape(n)
    i1 = []
    for i in range(len(n)):
        i1.append(random.randint(0, n[i]-1))
    if index_reshape(0, i1, n) != b[tuple(i1)]:
        print(error_message)
        flag_ok = False

    if flag_ok:
        print('All tests passed successfully.')
    return flag_ok


class ArtificialNeuralNetwork:

    def __init__(self, receptors, layers):
        self.receptors = receptors
        self.neurons = receptors
        self.coefficients = 0
        self.alpha = 0.2

        #   a layer is a list:
        #   [0] is a class of a layer: 'receptors', 'fully_connected' or 'convolutional'
        #   [1] is a list of parameters of the layer, the first one of which is a number of neurons in the layer
        #   [2] is a list of lists of indexes of input neurons
        #   [3] is a list of lists of indexes of parameters for each neuron function

        self.layer = [['receptors', [receptors], [], []]]
        for current_layer in layers:
            layername = current_layer[0]
            parameters = current_layer[1]
            input_neurons = self.layer[len(self.layer) - 1][1][0]
            prev_layer_start = self.neurons - input_neurons
            prev_coefficients = self.coefficients
            new_neurons = parameters[0]
            new_layer_connections = list()
            new_layer_coefficients = list()
            if layername == 'fully_connected':
                current_coefficients = prev_coefficients
                for i in range(new_neurons):  # add i-th neuron in a new layer
                    new_layer_coefficients.append(list(range(current_coefficients, current_coefficients + input_neurons)))
                    current_coefficients += input_neurons
                    self.neurons += new_neurons
                    self.coefficients += new_neurons * input_neurons
                    new_layer_connections = [list(range(prev_layer_start, prev_layer_start + input_neurons))] * new_neurons
                    self.layer.append([layername, parameters, new_layer_connections, new_layer_coefficients])
            elif layername == 'convolutional':
                size_x = parameters[1]  # input width
                size_y = parameters[2]  # input height
                size_z = parameters[3]  # input channels
                prev_layer_dimensions = (size_x, size_y, size_z)
                size_w = parameters[4]  # the size of the window
                size_new_x = size_x - size_w + 1
                size_new_y = size_y - size_w + 1
                if size_new_x * size_new_y != new_neurons:
                    print('Incorrect parameters for the new layer')
                for x in range(size_new_x):
                    for y in range(size_new_y):
                        neuron_connections = []
                        for z in range(size_z):
                            for w1 in range(size_w):
                                for w2 in range(size_w):
                                    neuron_connections.append(index_reshape(prev_layer_start, (x + w1, y + w2, z),prev_layer_dimensions))
                        new_layer_connections.append(neuron_connections)
                new_layer_coefficients = [list(range(prev_coefficients, prev_coefficients + size_w ** 2 * size_z))] * new_neurons
                self.neurons += new_neurons
                self.coefficients += size_w ** 2 * size_z
                self.layer.append([layername, parameters, new_layer_connections, new_layer_coefficients])
            else:
                print('Undefined layer: ', layername)

        self.coefs = np.empty(self.coefficients, dtype=float)
        for i in range(self.coefficients):
            self.coefs[i] = random.normalvariate(0, 1)

    def print(self):
        print('My artificial neural network:')
        print(f'receptors: {self.receptors}, neurons: {self.neurons}, coefficients: {self.coefficients}.')
        for i in range(len(self.layer)):
            print('')
            print(f'Layer {i}, class: {self.layer[i][0]}')
            print('Layer parameters:', self.layer[i][1])
            print('Indexes of connections:', self.layer[i][2])
            print('Indexes of coefficients:', self.layer[i][3])


    def run(self, coefs, inputs):
        all_neurons = np.empty(self.neurons, dtype=float)
        all_neurons[:self.receptors] = inputs
        current_neuron = self.receptors
        for current_layer in self.layer[1:]:
            for i in range(current_layer[1][0]):
                signal = all_neurons[current_layer[2][i]].dot(coefs[current_layer[3][i]])
                signal = min(100,max(-100, signal))
                all_neurons[current_neuron] = 1/(1 + self.alpha**signal)                # the activation function
                current_neuron += 1
        result = all_neurons[current_neuron-current_layer[1][0]:]
        return result / np.sum(result)

    def fullrun(self, ):
        a = 1


def load_data(sets)
    for dataset in sets:
        data = load_dataset(set)
        data_size = np.shape(data)[0]
        test_size = int(data_size * testset)
        training_size = data_size - test_size
        training_indexes = random.sample(range(data_size), training_size)
        test_indexes = []
        for i in range(data_size):
            if 

my_frame_size = 3
my_convolutional_neurons = (my_input_image_size[0]-my_frame_size+1) * (my_input_image_size[1]-my_frame_size+1)
my_layers = list()
my_layers.append(['convolutional', [my_convolutional_neurons, my_input_image_size[0], my_input_image_size[0], 3, my_frame_size]])
my_layers.append(['fully_connected', [32]])
my_layers.append(['fully_connected', [4]])
my_layers.append(['fully_connected', [2]])

start_time = time.time()
print('Loading data and initializing ANN... ', end='')

cat_or_dog = ArtificialNeuralNetwork(my_preceptors, my_layers)

dogs_dataset = load_dataset('dogs')
cats_dataset = load_dataset('cats')

dogs_training_set = rangom.sample(dim(dogs_dataset)[0], dim(dogs_dataset)[0]

execution_time = time.time() - start_time
print(f'Done in {round(execution_time, 3)} seconds.')
